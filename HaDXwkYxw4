#!/bin/bash
set -e

GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
NC='\033[0m'

stage() { echo -e "\n${BLUE}========== $1 ==========${NC}"; }
progressbar() { local msg=$1; for i in {1..14}; do echo -ne "${CYAN}$msg$(printf '%*s' $((i%4)) | tr ' ' '.')\r${NC}"; sleep 0.12; done; echo ""; }
rocket_anim() { for i in $(seq 1 6); do echo -ne "🚀"; sleep 0.1; done; echo ""; }

validate_domain() {
    [[ "$1" =~ ^[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)+$ ]] \
        && [[ ! "$1" =~ / ]] \
        && [[ ! "$1" =~ ^(http|https) ]] \
        && [[ ! "$1" =~ ^www\. ]] \
        && [[ ! "$1" =~ \.$ ]] \
        && [[ ! "$1" =~ ^\. ]] \
        && [[ ! "$1" =~ [^a-zA-Z0-9.-] ]]
}
validate_login() { [[ "$1" =~ ^[a-zA-Z0-9-]{3,}$ ]]; }
validate_password() { [[ ${#1} -ge 8 ]]; }
generate_password() { tr -dc 'A-Za-z0-9' < /dev/urandom | head -c 10; }
generate_login() { tr -dc 'A-Za-z' < /dev/urandom | head -c 6; }

echo -e "${CYAN}"
echo    "##############################################################"
echo    "#           Marzban (Cloudflare Edition, alexcoder)          #"
echo    "#         Быстрая установка с Nginx и Cloudflare SSL         #"
echo    "#                                                            #"
echo    "# Установщик разработан alexcoder для курса на skladchik.org #"
echo    "##############################################################"
echo -e "${NC}\n"

if [[ $EUID -ne 0 ]]; then
  echo -e "${YELLOW}[!] Запустите этот скрипт от имени root! (sudo su)${NC}"
  exit 1
fi

while true; do
    read -rp "🌐 Введите ваш домен (например: vpnsite.ru или panel.example.com): " DOMAIN
    if validate_domain "$DOMAIN"; then
        break
    else
        echo -e "${YELLOW}❌ Некорректный формат домена! Только имя, без http(s), www, слэшей, пробелов.${NC}"
    fi
done

while true; do
    read -rp "👤 Установите имя администратора (4+ латинских букв, или просто нажмите Enter для автогенерации): " ADMIN_USER
    if [[ -z "$ADMIN_USER" ]]; then
        ADMIN_USER=$(generate_login)
        echo -e "${CYAN}🆕 Сгенерирован логин: $ADMIN_USER${NC}"
        break
    fi
    if validate_login "$ADMIN_USER"; then
        break
    else
        echo -e "${YELLOW}❌ Неверный формат логина! Только латинские буквы, цифры, тире, минимум 4 символа.${NC}"
    fi
done

while true; do
    read -srp "🔑 Введите пароль администратора (минимум 8 символов, или просто нажмите Enter для автогенерации): " ADMIN_PASS1; echo
    if [[ -z "$ADMIN_PASS1" ]]; then
        ADMIN_PASS=$(generate_password)
        echo -e "\n${CYAN}🔒 Сгенерирован пароль: $ADMIN_PASS${NC}"
        break
    fi
    read -srp "🔑 Повторите пароль администратора: " ADMIN_PASS2; echo
    if [[ "$ADMIN_PASS1" != "$ADMIN_PASS2" ]]; then
        echo -e "${YELLOW}❌ Пароли не совпадают! Попробуйте ещё раз.${NC}"
        continue
    fi
    if ! validate_password "$ADMIN_PASS1"; then
        echo -e "${YELLOW}❌ Пароль должен быть не менее 8 символов.${NC}"
        continue
    fi
    ADMIN_PASS="$ADMIN_PASS1"
    break
done

stage "Обновление пакетов и установка зависимостей"
progressbar "Обновление системы"
DEBIAN_FRONTEND=noninteractive apt-get update -y -qq

if ! apt-cache policy docker-compose-plugin 2>/dev/null | grep -q download.docker.com; then
    echo -e "${YELLOW}Adding official Docker repository for latest docker-compose-plugin...${NC}"
    apt-get install -y ca-certificates curl gnupg lsb-release
    install -m 0755 -d /etc/apt/keyrings
    if [[ ! -f /etc/apt/keyrings/docker.gpg ]]; then
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    fi
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | \
      tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt-get update
fi

progressbar "Установка основных пакетов"
DEBIAN_FRONTEND=noninteractive apt-get install -y -qq ca-certificates curl gnupg lsb-release git nginx docker.io docker-compose-plugin jq

stage "Включение сервисов"
systemctl enable --now docker
systemctl enable --now nginx

# Проверка порта 80
if ss -tuln | grep -q ":80 "; then
    if ! ss -tulnp | grep -q ':80.*nginx'; then
        echo -e "${YELLOW}❌ Порт 80 уже занят другим сервисом. Остановите его или сбросьте сервер до заводских настроек через панель провайдера, чтобы начать с чистой системы.${NC}"
        exit 1
    fi
fi

stage "Клонируем Marzban 0.8.4"
progressbar "Скачиваем репозиторий"
rm -rf /opt/marzban
git clone --branch v0.8.4 --depth 1 https://github.com/Gozargah/Marzban.git /opt/marzban > /dev/null

cd /opt/marzban

stage "Генерация docker-compose.yml"
progressbar "Готовим Docker Compose"
cat > docker-compose.yml <<EOF
services:
  marzban:
    image: gozargah/marzban:v0.8.4
    restart: always
    network_mode: host
    environment:
      - DOMAIN=$DOMAIN
      - ADMIN_USERNAME=$ADMIN_USER
      - ADMIN_PASSWORD=$ADMIN_PASS
      - UVICORN_HOST=0.0.0.0
      - UVICORN_PORT=8000
    volumes:
      - /var/lib/marzban:/var/lib/marzban
      - /var/log/marzban:/var/log/marzban
EOF

stage "Запуск Marzban"
progressbar "Запуск контейнера"
docker compose down > /dev/null 2>&1 || true
docker compose up -d > /dev/null

sleep 8
if ! docker compose ps | grep -q Up; then
    echo -e "${YELLOW}❌ Контейнер Marzban не стартовал! Посмотрите логи командой: docker compose logs"
    echo -e "${YELLOW}Если нужна помощь — обратитесь к разработчику или в чат курса.${NC}"
    exit 1
fi

echo -e "${CYAN}Создаём администратора автоматически...${NC}"
echo -e "y\n\n\n" | docker compose exec -T marzban marzban-cli admin create --username "$ADMIN_USER" --password "$ADMIN_PASS" || true

stage "Настройка Nginx-прокси"
progressbar "Настраиваем Nginx"
rm -f /etc/nginx/sites-enabled/default

cat > /etc/nginx/sites-available/marzban <<NGINX
server {
    listen 80;
    server_name _;
    location / {
        proxy_pass         http://127.0.0.1:8000;
        proxy_set_header   Host \$host;
        proxy_set_header   X-Real-IP \$remote_addr;
        proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto \$scheme;
    }
}
NGINX

ln -sf /etc/nginx/sites-available/marzban /etc/nginx/sites-enabled/marzban
nginx -t
systemctl restart nginx

sleep 3

stage "Установка завершена"
rocket_anim

IP=$(curl -s http://checkip.amazonaws.com)

INFO_FILE="/root/vpn-install-info.txt"
cat > "$INFO_FILE" <<EOF
Marzban v0.8.4 (Cloudflare/доменная установка)
=============================================
Дата: $(date)
Панель: https://$DOMAIN/dashboard

Логин: $ADMIN_USER
Пароль: $ADMIN_PASS

Если потеряете файл — сбросить пароль можно через marzban-cli внутри контейнера.
EOF

chmod 600 "$INFO_FILE"

echo -e "${GREEN}🎉 Marzban установлен и готов к работе!${NC}\n"
echo -e "🌍 ${CYAN}Панель управления:${NC} http://$IP:8000/dashboard"
echo -e "👤 ${CYAN}Логин администратора:${NC} $ADMIN_USER"
echo -e "🔑 ${CYAN}Пароль администратора:${NC} $ADMIN_PASS\n"
echo -e "📄 ${YELLOW}Вся информация об установке сохранена в: ${CYAN}$INFO_FILE${NC}"
echo -e "${GREEN}Этот файл защищен и может быть прочитан только суперпользователем (root).${NC}\n"
echo -e "${BLUE}Скрипт разработан alexcoder для skladchik.org${NC}"
echo -e "${CYAN}Ваш сервер готов к работе 🚀 !${NC}\n"
echo -e "${GREEN}👇Теперь запустите команду для генерации xray конфига:👇${NC}\n"
echo -e "${BLUE}bash <(curl -fsSL https://raw.githubusercontent.com/a1exc0der/marzban-onestep/refs/heads/main/xraygen)${NC}\n"
echo -e "${GREEN}☝️Скопируйте эту команду, вставьте в терминал ниже и нажмите Enter☝️${NC}\n"
